"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blaze = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.9.1
 * source: third_party/github.com/bazelbuild/bazel/src/main/protobuf/worker_protocol.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
const pb_1 = require("google-protobuf");
var blaze;
(function (blaze) {
    var worker;
    (function (worker) {
        class Input extends pb_1.Message {
            constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("path" in data && data.path != undefined) {
                        this.path = data.path;
                    }
                    if ("digest" in data && data.digest != undefined) {
                        this.digest = data.digest;
                    }
                }
            }
            get path() {
                return pb_1.Message.getField(this, 1);
            }
            set path(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get digest() {
                return pb_1.Message.getField(this, 2);
            }
            set digest(value) {
                pb_1.Message.setField(this, 2, value);
            }
            toObject() {
                const data = {};
                if (this.path != null) {
                    data.path = this.path;
                }
                if (this.digest != null) {
                    data.digest = this.digest;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.path === "string" && this.path.length)
                    writer.writeString(1, this.path);
                if (this.digest !== undefined)
                    writer.writeBytes(2, this.digest);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Input();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.path = reader.readString();
                            break;
                        case 2:
                            message.digest = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return Input.deserialize(bytes);
            }
        }
        worker.Input = Input;
        class WorkRequest extends pb_1.Message {
            constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("arguments" in data && data.arguments != undefined) {
                        this.arguments = data.arguments;
                    }
                    if ("inputs" in data && data.inputs != undefined) {
                        this.inputs = data.inputs;
                    }
                    if ("request_id" in data && data.request_id != undefined) {
                        this.request_id = data.request_id;
                    }
                    if ("cancel" in data && data.cancel != undefined) {
                        this.cancel = data.cancel;
                    }
                    if ("verbosity" in data && data.verbosity != undefined) {
                        this.verbosity = data.verbosity;
                    }
                }
            }
            get arguments() {
                return pb_1.Message.getField(this, 1);
            }
            set arguments(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get inputs() {
                return pb_1.Message.getRepeatedWrapperField(this, Input, 2);
            }
            set inputs(value) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get request_id() {
                return pb_1.Message.getField(this, 3);
            }
            set request_id(value) {
                pb_1.Message.setField(this, 3, value);
            }
            get cancel() {
                return pb_1.Message.getField(this, 4);
            }
            set cancel(value) {
                pb_1.Message.setField(this, 4, value);
            }
            get verbosity() {
                return pb_1.Message.getField(this, 5);
            }
            set verbosity(value) {
                pb_1.Message.setField(this, 5, value);
            }
            toObject() {
                const data = {};
                if (this.arguments != null) {
                    data.arguments = this.arguments;
                }
                if (this.inputs != null) {
                    data.inputs = this.inputs.map((item) => item.toObject());
                }
                if (this.request_id != null) {
                    data.request_id = this.request_id;
                }
                if (this.cancel != null) {
                    data.cancel = this.cancel;
                }
                if (this.verbosity != null) {
                    data.verbosity = this.verbosity;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.arguments !== undefined)
                    writer.writeRepeatedString(1, this.arguments);
                if (this.inputs !== undefined)
                    writer.writeRepeatedMessage(2, this.inputs, (item) => item.serialize(writer));
                if (this.request_id !== undefined)
                    writer.writeInt32(3, this.request_id);
                if (this.cancel !== undefined)
                    writer.writeBool(4, this.cancel);
                if (this.verbosity !== undefined)
                    writer.writeInt32(5, this.verbosity);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkRequest();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        case 2:
                            reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Input.deserialize(reader), Input));
                            break;
                        case 3:
                            message.request_id = reader.readInt32();
                            break;
                        case 4:
                            message.cancel = reader.readBool();
                            break;
                        case 5:
                            message.verbosity = reader.readInt32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return WorkRequest.deserialize(bytes);
            }
        }
        worker.WorkRequest = WorkRequest;
        class WorkResponse extends pb_1.Message {
            constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("exit_code" in data && data.exit_code != undefined) {
                        this.exit_code = data.exit_code;
                    }
                    if ("output" in data && data.output != undefined) {
                        this.output = data.output;
                    }
                    if ("request_id" in data && data.request_id != undefined) {
                        this.request_id = data.request_id;
                    }
                    if ("was_cancelled" in data && data.was_cancelled != undefined) {
                        this.was_cancelled = data.was_cancelled;
                    }
                }
            }
            get exit_code() {
                return pb_1.Message.getField(this, 1);
            }
            set exit_code(value) {
                pb_1.Message.setField(this, 1, value);
            }
            get output() {
                return pb_1.Message.getField(this, 2);
            }
            set output(value) {
                pb_1.Message.setField(this, 2, value);
            }
            get request_id() {
                return pb_1.Message.getField(this, 3);
            }
            set request_id(value) {
                pb_1.Message.setField(this, 3, value);
            }
            get was_cancelled() {
                return pb_1.Message.getField(this, 4);
            }
            set was_cancelled(value) {
                pb_1.Message.setField(this, 4, value);
            }
            toObject() {
                const data = {};
                if (this.exit_code != null) {
                    data.exit_code = this.exit_code;
                }
                if (this.output != null) {
                    data.output = this.output;
                }
                if (this.request_id != null) {
                    data.request_id = this.request_id;
                }
                if (this.was_cancelled != null) {
                    data.was_cancelled = this.was_cancelled;
                }
                return data;
            }
            serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.exit_code !== undefined)
                    writer.writeInt32(1, this.exit_code);
                if (typeof this.output === "string" && this.output.length)
                    writer.writeString(2, this.output);
                if (this.request_id !== undefined)
                    writer.writeInt32(3, this.request_id);
                if (this.was_cancelled !== undefined)
                    writer.writeBool(4, this.was_cancelled);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorkResponse();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.exit_code = reader.readInt32();
                            break;
                        case 2:
                            message.output = reader.readString();
                            break;
                        case 3:
                            message.request_id = reader.readInt32();
                            break;
                        case 4:
                            message.was_cancelled = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary() {
                return this.serialize();
            }
            static deserializeBinary(bytes) {
                return WorkResponse.deserialize(bytes);
            }
        }
        worker.WorkResponse = WorkResponse;
    })(worker = blaze.worker || (blaze.worker = {}));
})(blaze = exports.blaze || (exports.blaze = {}));
