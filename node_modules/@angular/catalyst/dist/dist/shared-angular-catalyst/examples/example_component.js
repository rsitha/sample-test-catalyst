var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, EventEmitter, Inject, InjectionToken, Input, Output } from '@angular/core';
export const INJECTED_MESSAGE = new InjectionToken('INJECTED_MESSAGE');
export const AN_OBSERVABLE = new InjectionToken('AN_OBSERVABLE');
/** Example Component */
let ExampleComponent = class ExampleComponent {
    constructor(injectedMessage, anObservable) {
        this.injectedMessage = injectedMessage;
        this.anObservable = anObservable;
        this.anInput = 'Hello world!';
        this.anOutput = new EventEmitter();
    }
    ngOnChanges() {
        this.computedValue = `::${this.anInput}::`;
    }
};
__decorate([
    Input()
], ExampleComponent.prototype, "anInput", void 0);
__decorate([
    Output()
], ExampleComponent.prototype, "anOutput", void 0);
ExampleComponent = __decorate([
    Component({
        selector: 'example-component',
        templateUrl: './example_component.ng.html',
    }),
    __param(0, Inject(INJECTED_MESSAGE)),
    __param(1, Inject(AN_OBSERVABLE))
], ExampleComponent);
export { ExampleComponent };
