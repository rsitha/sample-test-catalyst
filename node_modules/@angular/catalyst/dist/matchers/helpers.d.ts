import { Observable } from 'rxjs';
/**
 * Returns sequence of values emitted by observable. Should be used inside of a
 * test wrapped with fakeAsync or in catalyst tests.
 *
 * Does not handle exceptions, completions, and delayed results.
 *
 * This function awaits and executes asynchronously, so it can potentially mask
 * asynchronous vs synchronous values. For more explicit synchronous behavior,
 * see {@link immediatelyGetValues}.
 *
 * Usage:
 *   awaitValues(someObservable)
 *
 * Throws an exception if used outside of FakeAsyncZone or SyncZone.
 *
 * @see immediatelyGetValues
 */
export declare function awaitValues<T>(observable: Observable<T>): T[];
/**
 * Returns synchronous sequence of values immediately emitted by observable upon
 * subscription.
 *
 * Does not handle exceptions, completions, and delayed results.
 *
 * Usage:
 *   immediatelyGetValues(someObservable)
 *
 * @see awaitValues
 */
export declare function immediatelyGetValues<T>(observable: Observable<T>): T[];
/**
 * Flushes all tasks and currently queued timers. Supports both Sync and
 * FakeAsync zones.
 */
export declare function flushAllInCurrentZone(): void;
/**
 * Executes async code in current zone. Supports both Sync and FakeAsync zones.
 */
export declare function executeAsyncInCurrentZone(fn: () => void): void;
/**
 * This handles conditionally displaying the results of jasmine.diffBuilder.
 *
 * There are 2 potential cases here:
 * - For primitive values this is redundant, so we drop it
 * - For comparing Objects to Object and Array to Array we return it as it.
 */
export declare function extraInfo(info: string, expected: unknown, actual: unknown): string;
//# sourceMappingURL=helpers.d.ts.map