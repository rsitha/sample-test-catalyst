/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ComponentHarness, ComponentHarnessConstructor, HarnessEnvironment, HarnessLoader, HarnessQuery, TestElement } from '@angular/cdk/testing';
/** Type for the query function used to find DOM elements. */
export declare type QueryFunction = (selector: string, root: Element) => Iterable<Element> | ArrayLike<Element>;
/** Options to configure the environment. */
export interface CatalystHarnessEnvironmentOptions {
    /** The query function used to find DOM elements. */
    queryFn: QueryFunction;
}
/** A `HarnessEnvironment` implementation for Catalyst. */
export declare class CatalystHarnessEnvironment extends HarnessEnvironment<Element> {
    /** The options for this environment. */
    private options;
    protected constructor(rawRootElement: Element, options?: CatalystHarnessEnvironmentOptions);
    /** Creates a `HarnessLoader` rooted at the given fixture's root element. */
    static loader(options?: CatalystHarnessEnvironmentOptions): HarnessLoader;
    /** Gets the native DOM element corresponding to the given TestElement. */
    static getNativeElement(el: TestElement): Element;
    /**
     * Creates a `HarnessLoader` at the document root. This can be used if
     * harnesses are located outside of a fixture (e.g. overlays appended to the
     * document body).
     */
    static documentRootLoader(options?: CatalystHarnessEnvironmentOptions): HarnessLoader;
    /**
     * Creates a harness for the component that was bootstrapped in Catalyst. This
     * method ignores the selector of the boostrapped component when loading the
     * harness, as components do not have the correct selector when they are
     * created via the Catalyst `bootstrap` method.
     */
    static harnessForBootstrappedComponent<T extends ComponentHarness>(harnessType: ComponentHarnessConstructor<T>, options?: CatalystHarnessEnvironmentOptions): Promise<T>;
    forceStabilize(): Promise<void>;
    waitForTasksOutsideAngular(): Promise<void>;
    protected getDocumentRoot(): Element;
    protected createTestElement(element: Element): TestElement;
    protected createEnvironment(element: Element): HarnessEnvironment<Element>;
    protected getAllRawElements(selector: string): Promise<Element[]>;
}
/**
 * Gets the harness that matches the query.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The first instance found of a harness matching the query
 * @throws If no instance of a harness matching the query is found
 */
export declare function getHarness<T extends ComponentHarness>(query: HarnessQuery<T>, options?: {
    useDocumentRoot?: boolean;
    queryFn?: QueryFunction;
}): Promise<T>;
/**
 * Gets the harness that matches the query, or null if no match exists.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The first instance found of a harness matching the query,
 *         or null if none match
 */
export declare function getHarnessOrNull<T extends ComponentHarness>(query: HarnessQuery<T>, options?: {
    useDocumentRoot?: boolean;
    queryFn?: QueryFunction;
}): Promise<T | null>;
/**
 * Checks whether a harness matching the query exists.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return true iff a matching harness is found
 */
export declare function hasHarness<T extends ComponentHarness>(query: HarnessQuery<T>, options?: {
    useDocumentRoot?: boolean;
    queryFn?: QueryFunction;
}): Promise<boolean>;
/**
 * Gets a list of all harnesses that match the query.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The list of harness instances matching the query
 */
export declare function getAllHarnesses<T extends ComponentHarness>(query: HarnessQuery<T>, options?: {
    useDocumentRoot?: boolean;
    queryFn?: QueryFunction;
}): Promise<T[]>;
/** Gets the native DOM element corresponding to the given TestElement. */
export declare const getNativeElement: typeof CatalystHarnessEnvironment.getNativeElement;
//# sourceMappingURL=catalyst-harness-environment.d.ts.map