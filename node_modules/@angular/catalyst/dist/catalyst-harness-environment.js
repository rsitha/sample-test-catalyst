/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { handleAutoChangeDetectionStatus, HarnessEnvironment } from '@angular/cdk/testing';
import { UnitTestElement } from '@angular/cdk/testing/testbed';
import { flush, getEl } from './helpers.js';
/** The default environment options. */
const defaultEnvironmentOptions = {
    queryFn: (selector, root) => root.querySelectorAll(selector)
};
/** Whether auto change detection is currently disabled. */
let disableAutoChangeDetection = false;
/** Whether a handler for the auto change detection status is installed. */
let autoChangeDetectionHandlerInstalled = false;
function installAutoChangeDetectionStatusHandler() {
    if (!autoChangeDetectionHandlerInstalled) {
        autoChangeDetectionHandlerInstalled = true;
        handleAutoChangeDetectionStatus(({ isDisabled, onDetectChangesNow }) => {
            disableAutoChangeDetection = isDisabled;
            if (onDetectChangesNow) {
                detectChanges();
                onDetectChangesNow();
            }
        });
    }
}
function detectChanges() {
    flush();
}
/** A `HarnessEnvironment` implementation for Catalyst. */
export class CatalystHarnessEnvironment extends HarnessEnvironment {
    constructor(rawRootElement, options) {
        super(rawRootElement);
        this.options = Object.assign(Object.assign({}, defaultEnvironmentOptions), options);
        installAutoChangeDetectionStatusHandler();
    }
    /** Creates a `HarnessLoader` rooted at the given fixture's root element. */
    static loader(options) {
        return new CatalystHarnessEnvironment(getEl(), options);
    }
    /** Gets the native DOM element corresponding to the given TestElement. */
    static getNativeElement(el) {
        if (el instanceof UnitTestElement) {
            return el.element;
        }
        throw new Error('This TestElement was not created by the CatalystHarnessEnvironment');
    }
    /**
     * Creates a `HarnessLoader` at the document root. This can be used if
     * harnesses are located outside of a fixture (e.g. overlays appended to the
     * document body).
     */
    static documentRootLoader(options) {
        return new CatalystHarnessEnvironment(document.body, options);
    }
    /**
     * Creates a harness for the component that was bootstrapped in Catalyst. This
     * method ignores the selector of the boostrapped component when loading the
     * harness, as components do not have the correct selector when they are
     * created via the Catalyst `bootstrap` method.
     */
    static harnessForBootstrappedComponent(harnessType, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const environment = new CatalystHarnessEnvironment(getEl(), options);
            yield environment.forceStabilize();
            return environment.createComponentHarness(harnessType, getEl());
        });
    }
    forceStabilize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!disableAutoChangeDetection) {
                detectChanges();
            }
        });
    }
    waitForTasksOutsideAngular() {
        return __awaiter(this, void 0, void 0, function* () {
            flush();
        });
    }
    getDocumentRoot() {
        return document.body;
    }
    createTestElement(element) {
        return new UnitTestElement(element, () => this.forceStabilize());
    }
    createEnvironment(element) {
        return new CatalystHarnessEnvironment(element, this.options);
    }
    getAllRawElements(selector) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.forceStabilize();
            return Array.from(this.options.queryFn(selector, this.rawRootElement));
        });
    }
}
/**
 * Gets the harness that matches the query.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The first instance found of a harness matching the query
 * @throws If no instance of a harness matching the query is found
 */
export function getHarness(query, options) {
    const defaultLoader = getDefaultLoader(options);
    return defaultLoader.getHarness(query);
}
/**
 * Gets the harness that matches the query, or null if no match exists.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The first instance found of a harness matching the query,
 *         or null if none match
 */
export function getHarnessOrNull(query, options) {
    const defaultLoader = getDefaultLoader(options);
    return defaultLoader.getHarnessOrNull(query);
}
/**
 * Checks whether a harness matching the query exists.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return true iff a matching harness is found
 */
export function hasHarness(query, options) {
    const defaultLoader = getDefaultLoader(options);
    return defaultLoader.hasHarness(query);
}
/**
 * Gets a list of all harnesses that match the query.
 * @param query A HarnessQuery for the harness to find. This may be either:
 *   - The constructor for a ComponentHarness, e.g. `MatButton`
 *   - A HarnessPredicate such as one returned by a `.with()` method,
 *     e.g. `MatButton.with({text: 'Ok'})`
 * @param options Options for the harness loader
 *   - useDocumentRoot: whether to search for harnesses under `document.body`
 *     rather than the test's fixture element. Specify `useDocumentRoot: true`
 *     when looking for an element in a `CdkOverlay`, or other elements
 *     programmatically appended to the body
 *   - queryFn: specifies a custom function to use for locating elements,
 *     by default uses `(s, r) => r.querySelectorAll(s)`
 * @return The list of harness instances matching the query
 */
export function getAllHarnesses(query, options) {
    const defaultLoader = getDefaultLoader(options);
    return defaultLoader.getAllHarnesses(query);
}
/** Gets the default loader for top-level harness getter functions. */
function getDefaultLoader(options) {
    const catalystEnvOptions = (options === null || options === void 0 ? void 0 : options.queryFn) ? { queryFn: options.queryFn } : undefined;
    return (options === null || options === void 0 ? void 0 : options.useDocumentRoot) ?
        CatalystHarnessEnvironment.documentRootLoader(catalystEnvOptions) :
        CatalystHarnessEnvironment.loader(catalystEnvOptions);
}
/** Gets the native DOM element corresponding to the given TestElement. */
export const getNativeElement = CatalystHarnessEnvironment.getNativeElement;
